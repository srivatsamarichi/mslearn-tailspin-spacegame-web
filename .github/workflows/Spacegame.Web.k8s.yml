name: Spacegame.Web.k8s
on:
  workflow_dispatch:
  #schedule:
  #  - cron: '0 0 * * *'
  push:
    branches: [master, k8s]
  pull_request:
    branches: [ master ]

# Environment variables available to all jobs and steps in this workflow
env:
  REGISTRY_NAME: darquewarrior
  CLUSTER_NAME: playground
  CLUSTER_RESOURCE_GROUP: Playground
  NAMESPACE: default

jobs:
  Container_Build:
    name: Build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2    
    
    # Connect to Azure Container registry (ACR)
    - name: Docker login
      uses: azure/docker-login@v1
      with:
        login-server: darquewarrior.azurecr.io
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
    
    # Install Trivy tool
    - name: Install Trivy
      run: |
        #!/bin/bash
        sudo apt-get install wget apt-transport-https gnupg lsb-release
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install trivy
        echo $HOME/Library/Caches
    
    - name: Container build, scan and tag image
      run: |
        docker build -f $GITHUB_WORKSPACE/Tailspin.SpaceGame.Web/Dockerfile -t ${{ secrets.ACR }}/tailspinspacegameweb:${{ github.run_number }} .
        trivy --exit-code 0 --severity MEDIUM,HIGH ${{ secrets.ACR }}/tailspinspacegameweb:${{ github.run_number }}
    
    - name: Container push to a Azure Container registry (ACR)
      run: |
        docker push ${{ secrets.ACR }}/tailspinspacegameweb:${{ github.run_number }}	
#-------------------------
  AKS_deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: Container_Build
    steps:
    - name: Checkout
      uses: actions/checkout@v2   
    
    - name: Azure login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}    
    
    # Connect to Azure Container registry (ACR)
    - uses: azure/docker-login@v1
      name: Docker login
      with:
        login-server: ${{ env.REGISTRY_NAME }}.azurecr.io
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}     

    # Set the target Azure Kubernetes Service (AKS) cluster 
    - uses: azure/aks-set-context@v1
      name: Set the target AKS cluster
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        cluster-name: ${{ env.CLUSTER_NAME }}
        resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}
    
    # Create namespace if doesn't exist
    - run: |
        kubectl create namespace ${{ env.NAMESPACE }} --dry-run -o json | kubectl apply -f -
      name: Create namespace if doesn't exist
    
    # Create imagepullsecret for Azure Container registry (ACR)
    - uses: azure/k8s-create-secret@v1
      name: Create imagepullsecret for ACR
      with:
        container-registry-url: ${{ env.REGISTRY_NAME }}.azurecr.io
        container-registry-username: ${{ secrets.REGISTRY_USERNAME }}
        container-registry-password: ${{ secrets.REGISTRY_PASSWORD }}
        secret-name: ${{ env.REGISTRY_NAME }}-registry-connection
        namespace: ${{ env.NAMESPACE }}
    
    # Baking the helm chart to generate the manifests to deploy
    - uses: azure/k8s-bake@v1
      name: Baking the helm chart
      with:
        renderEngine: 'helm2'
        helmChart: ./deploy-k8s
        helm-version: 'latest' 
      id: bake
    
    # Deploy app to AKS
    - uses: azure/k8s-deploy@v1
      name: Deploy app to AKS
      with:
        manifests: ${{ steps.bake.outputs.manifestsBundle }}
           #manifests/deployment.yml
        images: |
          ${{ secrets.ACR }}/tailspinspacegameweb:${{ github.run_number }}
        imagepullsecrets: |
          ${{ env.REGISTRY_NAME }}-registry-connection
        namespace: ${{ env.NAMESPACE }}
